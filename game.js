class Game {
    constructor() {
        this.score = 0;
        this.timeLeft = 60; // 60 seconds game time
        this.lives = 3; // Starting with 3 lives
        this.isJumping = false;
        this.currentLane = 1; // 0: left, 1: center, 2: right
        this.obstacles = [];
        this.coins = [];
        this.gameInterval = null;
        this.gameLoopId = null;
        this.timerInterval = null;
        this.isGameOver = false;
        this.isMuted = true; // Start with sound muted
        this.playerName = '';
        this.playerPhone = '';
        this.bestScore = 0;
        this.playerResults = [];
        this.allResults = [];
        this.pendingScore = null; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã –¥–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        this.isMobile = this.checkIsMobile(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

        // Game settings
        this.obstacleProbability = 0.02; // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
        this.coinProbability = 0.03;   // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã

        // Initialize Supabase client
        this.initializeSupabase();

        // Initialize audio
        this.initializeAudio();
        
        // Define obstacle types
        this.obstacleTypes = [
            { emoji: 'ü™®', name: '–∫–∞–º–µ–Ω—å' },
            { emoji: 'üöó', name: '–º–∞—à–∏–Ω–∞' },
            { emoji: 'üöå', name: '–∞–≤—Ç–æ–±—É—Å' }
        ];

        // Save lane positions as ratios of game area width
        // this.lanePositions = [16.66, 50, 83.33]; // –°—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        this.laneRatios = [1/6, 1/2, 5/6]; // –î–æ–ª–∏ –¥–ª—è —Ü–µ–Ω—Ç—Ä–æ–≤ –ø–æ–ª–æ—Å [0.1666..., 0.5, 0.8333...]

        // Initialize game elements
        this.initializeElements();
        
        // Auth form handling
        this.setupAuthForm();
        
        // Leaderboard handling
        this.setupLeaderboard();
    }

    initializeSupabase() {
        try {
            // Replace with your Supabase URL and anon key
            const supabaseUrl = 'https://otyhkskvkqmvzkvrtfpy.supabase.co';
            const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im90eWhrc2t2a3FtdnprdnJ0ZnB5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU2MDA4MzksImV4cCI6MjA2MTE3NjgzOX0.74tnApnQiDpRCElSgGDP54lMnKB-dp4n6dtp1CL6Yi4';
            this.supabase = supabase.createClient(supabaseUrl, supabaseKey);
        } catch (error) {
            console.error('Error initializing Supabase:', error);
            // Fallback to localStorage if Supabase initialization fails
            this.supabase = null;
        }
    }

    initializeAudio() {
        try {
            this.audio = {
                background: new Audio('audio/background.mp3')
                // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–≤—É–∫–∏ –∫—Ä–æ–º–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ
            };

            // Configure background music
            if (this.audio.background) {
                this.audio.background.loop = true;
                this.audio.background.volume = 0; // Start with volume 0
            }
        } catch (error) {
            console.error('Error initializing audio:', error);
        }
    }

    initializeElements() {
        // Find main game elements
        this.player = document.getElementById('player');
        this.gameArea = document.querySelector('.game-area');
        this.scoreElement = document.getElementById('score');
        this.timerElement = document.getElementById('timer');
        this.gameOverScreen = document.getElementById('game-over');
        this.finalScoreElement = document.getElementById('final-score');
        this.resultMessageElement = document.querySelector('.result-message');
        this.bestScoreElement = document.getElementById('best-score');
        this.gameContainer = document.getElementById('game-container');
        this.authScreen = document.getElementById('auth-screen');
        this.livesElement = document.getElementById('lives');
        this.livesCountElement = this.livesElement ? this.livesElement.querySelector('.lives-count') : null;

        // Check if elements are found
        if (!this.player) console.error("Player element not found!");
        if (!this.gameArea) console.error("Game area element not found!");
        if (!this.scoreElement) console.error("Score element not found!");
        if (!this.timerElement) console.error("Timer element not found!");
        if (!this.gameOverScreen) console.error("Game Over screen not found!");

        // Hide screens at the beginning
        if (this.gameOverScreen) this.gameOverScreen.classList.add('hidden');

        // Add sound button to game area
        this.initializeSoundButton();
        
        // Create lives display if it doesn't exist
        this.createLivesDisplay();
        
        // Create leaderboard button outside game area
        this.createLeaderboardButton();

        // Set event listeners
        this.setupEventListeners();
        
        // Set initial player position
        this.updatePlayerPosition();
    }

    initializeSoundButton() {
        try {
            const soundButton = document.createElement('button');
            soundButton.id = 'sound-toggle';
            soundButton.innerHTML = 'üîá'; // Start with mute icon
            soundButton.className = 'sound-button';

            // Find the controls-right container
            const controlsRight = document.querySelector('.controls-right');
            if (controlsRight) {
                controlsRight.appendChild(soundButton);
                soundButton.addEventListener('click', () => {
                    this.toggleSound();
                    soundButton.innerHTML = this.isMuted ? 'üîá' : 'üîä';
                });
            }
        } catch (error) {
            console.error('Error initializing sound button:', error);
        }
    }

    setupAuthForm() {
        const authForm = document.getElementById('auth-form');
        const playerPhoneInput = document.getElementById('player-phone');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Å–∫—É –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if (playerPhoneInput) {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if (!playerPhoneInput.value) {
                playerPhoneInput.value = '+7';
            }
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è +7 –≤ –Ω–∞—á–∞–ª–µ
            playerPhoneInput.addEventListener('input', (e) => {
                let value = e.target.value;
                
                // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ +
                const cleanedValue = value.replace(/[^\d+]/g, '');
                
                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∏—Ä–∞–µ—Ç –≤—Å—ë, –æ—Å—Ç–∞–≤–ª—è–µ–º +7
                if (cleanedValue.length <= 1) {
                    e.target.value = '+7';
                    return;
                }
                
                // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +7
                if (!cleanedValue.startsWith('+')) {
                    if (cleanedValue.startsWith('7')) {
                        e.target.value = '+' + cleanedValue;
                    } else if (cleanedValue.startsWith('8')) {
                        e.target.value = '+7' + cleanedValue.substring(1);
                    } else {
                        e.target.value = '+7' + cleanedValue;
                    }
                } else if (!cleanedValue.startsWith('+7')) {
                    e.target.value = '+7' + cleanedValue.substring(1);
                } else {
                    e.target.value = cleanedValue;
                }
                
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É (–≤–∫–ª—é—á–∞—è +7) –¥–æ 12 —Å–∏–º–≤–æ–ª–æ–≤: +7 –∏ 10 —Ü–∏—Ñ—Ä
                if (e.target.value.length > 12) {
                    e.target.value = e.target.value.substring(0, 12);
                }
            });
            
            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ +7 –ø—Ä–∏ backspace –∏–ª–∏ delete
            playerPhoneInput.addEventListener('keydown', (e) => {
                const value = e.target.value;
                
                if (
                    (e.key === 'Backspace' || e.key === 'Delete') && 
                    (value.length <= 2 || 
                     (e.target.selectionStart <= 2 && e.target.selectionEnd <= 2))
                ) {
                    e.preventDefault();
                }
            });
        }
        
        if (authForm) {
            authForm.addEventListener('submit', (e) => {
                e.preventDefault();
                
                const phoneInputGroup = playerPhoneInput.closest('.form-group');
                const isPhoneVisible = phoneInputGroup && !phoneInputGroup.classList.contains('form-group-hidden');
                
                if (!isPhoneVisible) {
                    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∏–≥—Ä–µ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    this.trackEvent('game_play_without_auth', {
                        device_type: this.isMobile ? 'mobile' : 'desktop'
                    });
                    this.authScreen.classList.add('hidden');
                    this.gameContainer.classList.remove('hidden');
                    this.startGame();
                    return;
                }
                
                this.playerName = "Player";
                let phoneNumber = playerPhoneInput.value.trim();
                
                // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã (–∫—Ä–æ–º–µ +)
                phoneNumber = phoneNumber.replace(/[^\d+]/g, '');
                
                // –î–æ–±–∞–≤–ª—è–µ–º + –≤ –Ω–∞—á–∞–ª–æ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if (!phoneNumber.startsWith('+')) {
                    // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ +7
                    if (phoneNumber.startsWith('8')) {
                        phoneNumber = '+7' + phoneNumber.substring(1);
                    } else if (phoneNumber.startsWith('7')) {
                        // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7, –¥–æ–±–∞–≤–ª—è–µ–º +
                        phoneNumber = '+' + phoneNumber;
                    } else {
                        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –∏–∑ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 7
                        phoneNumber = '+7' + phoneNumber;
                    }
                }
                
                this.playerPhone = phoneNumber;
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –º–µ—Ç—Ä–∏–∫—É
                this.trackEvent('user_auth', {
                    device_type: this.isMobile ? 'mobile' : 'desktop',
                    auth_source: this.pendingScore !== null ? 'after_game' : 'before_game'
                });
                
                this.loadPlayerResults();
                
                if (this.pendingScore !== null) {
                    console.log(`–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${this.pendingScore}`);
                    const pendingScoreValue = this.pendingScore;
                    const currentScore = this.score;
                    this.score = pendingScoreValue;
                    this.saveResult();
                    this.pendingScore = null;
                    this.score = 0;
                }
                
                // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –¥–µ–ª–∞–µ–º –µ–≥–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã
                if (playerPhoneInput) {
                    playerPhoneInput.required = false;
                    playerPhoneInput.hidden = true;
                    playerPhoneInput.disabled = true;
                    if (phoneInputGroup) {
                        phoneInputGroup.classList.add('form-group-hidden');
                    }
                }
                const startButton = document.getElementById('start-game-btn');
                if (startButton) {
                     startButton.textContent = '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É'; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                }

                console.log('Auth form submit. Before calling startGame. isGameOver:', this.isGameOver, 'gameLoopId:', this.gameLoopId);
                this.authScreen.classList.add('hidden');
                this.gameContainer.classList.remove('hidden');
                this.startGame();
            });
        }
    }

    setupLeaderboard() {
        const leaderboard = document.getElementById('leaderboard');
        const closeLeaderboardBtn = document.getElementById('close-leaderboard');
        
        if (closeLeaderboardBtn && leaderboard) {
            closeLeaderboardBtn.addEventListener('click', () => {
                leaderboard.classList.add('hidden');
            });
        }
    }

    updateLeaderboard() {
        const leaderboardList = document.getElementById('leaderboard-list');
        if (!leaderboardList) return;
        
        // Clear current leaderboard
        leaderboardList.innerHTML = '';
        
        // Show loading message
        const loadingMessage = document.createElement('div');
        loadingMessage.className = 'leaderboard-loading';
        loadingMessage.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...';
        leaderboardList.appendChild(loadingMessage);
        
        if (this.supabase) {
            // Fetch top 3 players directly from Supabase
            this.supabase
                .from('game_results')
                .select('*')
                .order('score', { ascending: false })
                .limit(10)
                .then(({ data, error }) => {
                    // Remove loading message
                    leaderboardList.innerHTML = '';
                    
                    if (error) {
                        console.error('Error loading leaderboard from Supabase:', error);
                        const errorMessage = document.createElement('div');
                        errorMessage.className = 'leaderboard-error';
                        errorMessage.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤';
                        leaderboardList.appendChild(errorMessage);
                        return;
                    }
                    
                    if (!data || data.length === 0) {
                        const noDataMessage = document.createElement('div');
                        noDataMessage.className = 'leaderboard-no-data';
                        noDataMessage.textContent = '–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤';
                        leaderboardList.appendChild(noDataMessage);
                        return;
                    }
                    
                    // Get unique players with their best scores
                    const playersMap = new Map();
                    
                    data.forEach(result => {
                        const key = `${result.name}-${result.phone}`;
                        if (!playersMap.has(key) || playersMap.get(key).score < result.score) {
                            playersMap.set(key, {
                                name: result.name,
                                phone: result.phone,
                                score: result.score
                            });
                        }
                    });
                    
                    // Convert to array and sort
                    const uniquePlayers = Array.from(playersMap.values());
                    uniquePlayers.sort((a, b) => b.score - a.score);
                    
                    // Get top 3 players
                    const topPlayers = uniquePlayers.slice(0, 3);
                    
                    // Position labels
                    const positions = ['1–µ –º–µ—Å—Ç–æ', '2–µ –º–µ—Å—Ç–æ', '3–µ –º–µ—Å—Ç–æ'];
                    
                    // Add players to leaderboard
                    topPlayers.forEach((player, index) => {
                        const item = document.createElement('div');
                        item.className = 'leaderboard-item';
                        
                        const rank = document.createElement('div');
                        rank.className = 'leaderboard-rank';
                        rank.textContent = positions[index];
                        
                        const phone = document.createElement('div');
                        phone.className = 'leaderboard-name';
                        // –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
                        const maskedPhone = player.phone.substring(0, 4) + '***' + player.phone.substring(player.phone.length - 2);
                        phone.textContent = maskedPhone;
                        
                        const score = document.createElement('div');
                        score.className = 'leaderboard-score';
                        score.textContent = player.score;
                        
                        item.appendChild(rank);
                        item.appendChild(phone);
                        item.appendChild(score);
                        
                        leaderboardList.appendChild(item);
                    });
                    
                    // If there are less than 3 players, add empty slots
                    for (let i = topPlayers.length; i < 3; i++) {
                        const item = document.createElement('div');
                        item.className = 'leaderboard-item empty-slot';
                        
                        const rank = document.createElement('div');
                        rank.className = 'leaderboard-rank';
                        rank.textContent = positions[i];
                        
                        const emptyName = document.createElement('div');
                        emptyName.className = 'leaderboard-name';
                        emptyName.textContent = '‚Äî';
                        
                        const emptyScore = document.createElement('div');
                        emptyScore.className = 'leaderboard-score';
                        emptyScore.textContent = '‚Äî';
                        
                        item.appendChild(rank);
                        item.appendChild(emptyName);
                        item.appendChild(emptyScore);
                        
                        leaderboardList.appendChild(item);
                    }
                });
        } else {
            // Fallback to localStorage if Supabase is not available
            this.loadAllResults();
            
            // Remove loading message
            leaderboardList.innerHTML = '';
            
            // Get top 3 unique players
            const topPlayers = this.getTopPlayers(3);
            
            // Position labels
            const positions = ['1–µ –º–µ—Å—Ç–æ', '2–µ –º–µ—Å—Ç–æ', '3–µ –º–µ—Å—Ç–æ'];
            
            // Add players to leaderboard
            topPlayers.forEach((player, index) => {
                const item = document.createElement('div');
                item.className = 'leaderboard-item';
                
                const rank = document.createElement('div');
                rank.className = 'leaderboard-rank';
                rank.textContent = positions[index];
                
                const phone = document.createElement('div');
                phone.className = 'leaderboard-name';
                // –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
                const maskedPhone = player.phone.substring(0, 4) + '***' + player.phone.substring(player.phone.length - 2);
                phone.textContent = maskedPhone;
                
                const score = document.createElement('div');
                score.className = 'leaderboard-score';
                score.textContent = player.score;
                
                item.appendChild(rank);
                item.appendChild(phone);
                item.appendChild(score);
                
                leaderboardList.appendChild(item);
            });
            
            // If there are less than 3 players, add empty slots
            for (let i = topPlayers.length; i < 3; i++) {
                const item = document.createElement('div');
                item.className = 'leaderboard-item empty-slot';
                
                const rank = document.createElement('div');
                rank.className = 'leaderboard-rank';
                rank.textContent = positions[i];
                
                const emptyName = document.createElement('div');
                emptyName.className = 'leaderboard-name';
                emptyName.textContent = '‚Äî';
                
                const emptyScore = document.createElement('div');
                emptyScore.className = 'leaderboard-score';
                emptyScore.textContent = '‚Äî';
                
                item.appendChild(rank);
                item.appendChild(emptyName);
                item.appendChild(emptyScore);
                
                leaderboardList.appendChild(item);
            }
        }
    }

    getTopPlayers(count) {
        // Get unique players with their best scores
        const playersMap = new Map();
        
        this.allResults.forEach(result => {
            const key = `${result.name}-${result.phone}`;
            if (!playersMap.has(key) || playersMap.get(key).score < result.score) {
                playersMap.set(key, {
                    name: result.name,
                    phone: result.phone,
                    score: result.score
                });
            }
        });
        
        // Convert to array and sort
        const uniquePlayers = Array.from(playersMap.values());
        uniquePlayers.sort((a, b) => b.score - a.score);
        
        // Return top N players
        return uniquePlayers.slice(0, count);
    }

    loadPlayerResults() {
        if (this.supabase) {
            // First try to load from Supabase
            this.supabase
                .from('game_results')
                .select('*')
                .eq('phone', this.playerPhone)
                .then(({ data, error }) => {
                    if (error) {
                        console.error('Error loading player results from Supabase:', error);
                        // Fallback to localStorage
                        this.loadPlayerResultsFromLocalStorage();
                    } else if (data) {
                        this.playerResults = data;
                        
                        // Find best score
                        this.bestScore = 0;
                        this.playerResults.forEach(result => {
                            if (result.score > this.bestScore) {
                                this.bestScore = result.score;
                            }
                        });
                        
                        // Update best score display
                        if (this.bestScoreElement) {
                            this.bestScoreElement.textContent = this.bestScore;
                        }
                    }
                });
        } else {
            // Fallback to localStorage
            this.loadPlayerResultsFromLocalStorage();
        }
    }
    
    loadPlayerResultsFromLocalStorage() {
        try {
            const storedResults = localStorage.getItem('gameResults');
            if (storedResults) {
                this.allResults = JSON.parse(storedResults);
                
                // Filter current player's results
                this.playerResults = this.allResults.filter(result => 
                    result.name === this.playerName && 
                    result.phone === this.playerPhone
                );
                
                // Get player's best score
                if (this.playerResults.length > 0) {
                    this.bestScore = Math.max(...this.playerResults.map(r => r.score));
                }
            }
        } catch (error) {
            console.error('Error loading player results from localStorage:', error);
            this.playerResults = [];
            this.bestScore = 0;
        }
    }

    loadAllResults() {
        if (this.supabase) {
            // Try loading from Supabase
            this.supabase
                .from('game_results')
                .select('*')
                .order('score', { ascending: false })
                .then(({ data, error }) => {
                    if (error) {
                        console.error('Error loading all results from Supabase:', error);
                        // Fallback to localStorage
                        this.loadFromLocalStorage();
                    } else if (data) {
                        this.allResults = data;
                    }
                });
        } else {
            // Fallback to localStorage
            this.loadFromLocalStorage();
        }
    }
    
    loadFromLocalStorage() {
        try {
            const storedResults = localStorage.getItem('gameResults');
            if (storedResults) {
                this.allResults = JSON.parse(storedResults);
            } else {
                this.allResults = [];
            }
        } catch (error) {
            console.error('Error loading from localStorage:', error);
            this.allResults = [];
        }
    }

    saveResult() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        if (!this.playerPhone || this.playerPhone.length < 10) {
            console.warn('Cannot save result: player is not authenticated');
            return;
        }
        
        console.log(`–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç ${this.score} –¥–ª—è –∏–≥—Ä–æ–∫–∞ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º ${this.playerPhone}`);
        
        // Create result object
        const result = {
            name: this.playerName,
            phone: this.playerPhone,
            score: this.score,
            date: new Date().toISOString().split('T')[0] // YYYY-MM-DD format
        };
        
        // Update player results
        this.playerResults.push(result);
        
        // Update best score
        if (this.score > this.bestScore) {
            this.bestScore = this.score;
            if (this.bestScoreElement) {
                this.bestScoreElement.textContent = this.bestScore;
            }
        }
        
        // Update message
        if (this.resultMessageElement) {
            if (this.score > this.bestScore && this.playerResults.length > 1) {
                this.resultMessageElement.textContent = '–ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!';
            } else if (this.playerResults.length > 1) {
                this.resultMessageElement.textContent = 
                    `–í–∞—à –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${this.bestScore}. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë!`;
            }
        }
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        // –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if (this.score < 0 || this.score > 1000) {
            console.error('Invalid score value detected');
            // Fallback to localStorage
            this.saveToLocalStorage(result);
            return;
        }
        
        // Save to Supabase
        if (this.supabase) {
            console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Supabase —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${this.score} –æ—á–∫–æ–≤ –¥–ª—è –Ω–æ–º–µ—Ä–∞ ${this.playerPhone}`);
            this.supabase
                .from('game_results')
                .insert([{
                    name: this.playerName,
                    phone: this.playerPhone,
                    score: this.score,
                    date: new Date().toISOString().split('T')[0]
                }])
                .then(({ data, error }) => {
                    if (error) {
                        console.error('Error saving result to Supabase:', error);
                        // Fallback to localStorage
                        this.saveToLocalStorage(result);
                    } else {
                        console.log('Result saved to Supabase successfully', data);
                    }
                });
        } else {
            // Fallback to localStorage
            this.saveToLocalStorage(result);
        }
    }

    saveToLocalStorage(result) {
        try {
            // Load existing results
            let results = [];
            const storedResults = localStorage.getItem('gameResults');
            if (storedResults) {
                results = JSON.parse(storedResults);
            }
            
            // Add new result
            results.push(result);
            
            // Save back to localStorage
            localStorage.setItem('gameResults', JSON.stringify(results));
            console.log('Result saved to localStorage');
        } catch (error) {
            console.error('Error saving to localStorage:', error);
        }
    }

    clearGame() {
        console.log('clearGame called. Current gameLoopId before clearing:', this.gameLoopId, 'TimerInterval:', this.timerInterval);
        // Hide screens
        if (this.gameOverScreen) this.gameOverScreen.classList.add('hidden');

        // Remove existing obstacles and coins from DOM
        const existingObstacles = document.querySelectorAll('.obstacle');
        const existingCoins = document.querySelectorAll('.coin');
        existingObstacles.forEach(obstacle => obstacle.remove());
        existingCoins.forEach(coin => coin.remove());

        // Clear arrays
        this.obstacles = [];
        this.coins = [];
        this.isGameOver = false;
        if (this.gameLoopId) {
            cancelAnimationFrame(this.gameLoopId);
            this.gameLoopId = null;
            console.log('clearGame: gameLoopId cancelled and set to null.');
        }
        if (this.gameInterval) {
            clearInterval(this.gameInterval);
            this.gameInterval = null;
        }
        if (this.timerInterval) {
            clearInterval(this.timerInterval);
            this.timerInterval = null;
            console.log('clearGame: timerInterval cleared.');
        }
        console.log('clearGame finished. gameLoopId after clearing:', this.gameLoopId, 'TimerInterval after:', this.timerInterval);
    }

    setupEventListeners() {
        // Keyboard controls
        document.addEventListener('keydown', (e) => this.handleKeyPress(e));

        // Touch controls (only left/right swipes)
        let touchStartX = 0;
        let touchStartY = 0;

        if (this.gameArea) {
            this.gameArea.addEventListener('touchstart', (e) => {
                touchStartX = e.touches[0].clientX;
                touchStartY = e.touches[0].clientY;
                e.preventDefault();
            }, { passive: false });

            this.gameArea.addEventListener('touchmove', (e) => {
                if (this.isGameOver || e.touches.length === 0) return;

                const touchEndX = e.touches[0].clientX;
                const touchEndY = e.touches[0].clientY;
                const deltaX = touchEndX - touchStartX;
                const deltaY = touchEndY - touchStartY;

                if (Math.abs(deltaX) > Math.abs(deltaY)) {
                    const swipeThreshold = 50;
                    if (deltaX > swipeThreshold) {
                        this.moveRight();
                        touchStartX = touchEndX;
                        touchStartY = touchEndY;
                    } else if (deltaX < -swipeThreshold) {
                        this.moveLeft();
                        touchStartX = touchEndX;
                        touchStartY = touchEndY;
                    }
                }
                e.preventDefault();
            }, { passive: false });
        }

        // Button controls (only left/right)
        const btnLeft = document.getElementById('btn-left');
        const btnRight = document.getElementById('btn-right');

        if (btnLeft) {
            btnLeft.addEventListener('touchstart', (e) => { e.preventDefault(); if (!this.isGameOver) this.moveLeft(); });
            btnLeft.addEventListener('click', () => { if (!this.isGameOver) this.moveLeft(); });
        }
        if (btnRight) {
            btnRight.addEventListener('touchstart', (e) => { e.preventDefault(); if (!this.isGameOver) this.moveRight(); });
            btnRight.addEventListener('click', () => { if (!this.isGameOver) this.moveRight(); });
        }

        // Restart buttons
        const restartButtons = [
            document.getElementById('restart'),
            document.getElementById('play-again')
        ];

        restartButtons.forEach(button => {
            if (button) {
                button.addEventListener('click', () => {
                    console.log('Restart button clicked');
                    this.restartGame();
                });
            }
        });
        
        // Leaderboard button from game over screen
        const showLeaderboardBtn = document.getElementById('show-leaderboard-from-gameover');
        if (showLeaderboardBtn) {
            showLeaderboardBtn.addEventListener('click', () => {
                this.updateLeaderboard();
                const leaderboard = document.getElementById('leaderboard');
                if (leaderboard) {
                    leaderboard.classList.remove('hidden');
                }
            });
        }
    }

    handleKeyPress(e) {
        if (this.isGameOver) return;
        switch (e.key) {
            case 'ArrowLeft': this.moveLeft(); break;
            case 'ArrowRight': this.moveRight(); break;
            // Add M for mute/unmute
            case 'm':
            case 'M':
            case '—å': // Russian M
                this.toggleSound();
                // Update icon on button if it exists
                const soundButton = document.getElementById('sound-toggle');
                if (soundButton) {
                     soundButton.innerHTML = this.isMuted ? 'üîá' : 'üîä';
                }
                break;
        }
    }

    moveLeft() {
        if (this.currentLane > 0) {
            this.currentLane--;
            this.updatePlayerPosition();
        }
    }

    moveRight() {
        if (this.currentLane < this.laneRatios.length - 1) {
            this.currentLane++;
            this.updatePlayerPosition();
        }
    }

    updatePlayerPosition() {
        if (!this.player || !this.gameArea) return;
        
        const gameAreaWidth = this.gameArea.offsetWidth;
        // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ü–µ–Ω—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–ª–æ—Å—ã –≤ –ø–∏–∫—Å–µ–ª—è—Ö
        const laneCenterPx = gameAreaWidth * this.laneRatios[this.currentLane];

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º transform: —Å–º–µ—â–∞–µ–º –∏–≥—Ä–æ–∫–∞ –∫ —Ü–µ–Ω—Ç—Ä—É –ø–æ–ª–æ—Å—ã (laneCenterPx)
        // –∞ –∑–∞—Ç–µ–º translateX(-50%) —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç —Å–∞–º —ç–ª–µ–º–µ–Ω—Ç –∏–≥—Ä–æ–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏.
        const transformValue = `translateX(${laneCenterPx}px) translateX(-50%)`;
        // console.log(`Updating player to lane ${this.currentLane}, centerPx: ${laneCenterPx}, transform: ${transformValue}`);
        this.player.style.transform = transformValue;
    }

    createObstacle() {
        const obstacleElement = document.createElement('div');
        obstacleElement.className = 'obstacle';
        const randomType = this.obstacleTypes[Math.floor(Math.random() * this.obstacleTypes.length)];
        obstacleElement.innerHTML = randomType.emoji;
        obstacleElement.title = randomType.name;
        const lane = Math.floor(Math.random() * this.laneRatios.length);
        obstacleElement.style.left = `${this.laneRatios[lane] * 100}%`;
        const initialY = 0; 
        obstacleElement.style.transform = `translateY(${initialY}px)`; // –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–±, CSS —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ X
        
        if (this.gameArea) {
            this.gameArea.appendChild(obstacleElement);
            this.obstacles.push({ 
                element: obstacleElement, 
                lane: lane, 
                type: randomType.name, 
                y: initialY // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É
            });
        }
    }

    createCoin() {
        const coinElement = document.createElement('div');
        coinElement.className = 'coin';
        coinElement.innerHTML = 'ü•ô'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏ –≥–∏—Ä–æ—Å–∞
        const lane = Math.floor(Math.random() * this.laneRatios.length);
        coinElement.style.left = `${this.laneRatios[lane] * 100}%`;
        const initialY = 0; 
        coinElement.style.transform = `translateY(${initialY}px)`; // –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–±, CSS —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ X

        if (this.gameArea) {
            this.gameArea.appendChild(coinElement);
            this.coins.push({ 
                element: coinElement, 
                lane: lane, 
                y: initialY // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É
            });
        }
    }

    moveObstacles() {
        for (let i = this.obstacles.length - 1; i >= 0; i--) {
            const obstacleObj = this.obstacles[i]; // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞—Ç—å —Å DOM —ç–ª–µ–º–µ–Ω—Ç–æ–º
            const obstacleElement = obstacleObj.element; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç

            if (!obstacleElement) {
                this.obstacles.splice(i, 1); // –£–¥–∞–ª—è–µ–º –∏–∑ –º–∞—Å—Å–∏–≤–∞, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç
                continue;
            }

            obstacleObj.y += 5; // Speed of obstacle, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É
            obstacleElement.style.transform = `translateY(${obstacleObj.y}px)`; // –ù–æ–≤—ã–π, CSS —É–∂–µ –æ—Ç—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–ª

            if (obstacleObj.y > this.gameArea.offsetHeight) {
                obstacleElement.remove(); // –£–¥–∞–ª—è–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç
                this.obstacles.splice(i, 1);
            } else if (this.checkCollision(obstacleObj)) { // –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º –∏ –¥—Ä—É–≥–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                this.handleCollision(obstacleObj, i);
            }
        }
    }

    moveCoins() {
        for (let i = this.coins.length - 1; i >= 0; i--) {
            const coinObj = this.coins[i]; // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º
            const coinElement = coinObj.element; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç

            if (!coinElement) {
                this.coins.splice(i, 1);
                continue;
            }

            coinObj.y += 3; // Speed of coin, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É
            coinElement.style.transform = `translateY(${coinObj.y}px)`; // –ù–æ–≤—ã–π, CSS —É–∂–µ –æ—Ç—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–ª

            if (coinObj.y > this.gameArea.offsetHeight) {
                coinElement.remove();
                this.coins.splice(i, 1);
            } else if (this.checkCoinCollision(coinObj)) { // –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç
                this.handleCoinCollection(coinObj, i);
            }
        }
    }

    checkCollision(obstacle) {
        if (!this.player) return false;
        const playerRect = this.player.getBoundingClientRect();
        const obstacleRect = obstacle.element.getBoundingClientRect();
        return obstacle.lane === this.currentLane &&
               obstacleRect.bottom > playerRect.top &&
               obstacleRect.top < playerRect.bottom;
    }

    checkCoinCollision(coin) {
        if (!this.player) return false;
        const playerRect = this.player.getBoundingClientRect();
        const coinRect = coin.element.getBoundingClientRect();
        return coin.lane === this.currentLane &&
               coinRect.bottom > playerRect.top &&
               coinRect.top < playerRect.bottom;
    }

    handleCollision(obstacle, index) {
        this.lives--;
        this.updateLivesDisplay();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ–º
        this.trackEvent('obstacle_collision', {
            obstacle_type: obstacle.type,
            lives_left: this.lives,
            score: this.score
        });
        
        obstacle.element.remove();
        this.obstacles.splice(index, 1);
        
        // End game if no lives left
        if (this.lives <= 0) {
            this.endGame();
        }
    }

    handleCoinCollection(coin, index) {
        this.score += 10;
        if (this.scoreElement) {
            this.scoreElement.textContent = this.score;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–±–æ—Ä–∞ –º–æ–Ω–µ—Ç—ã
        this.trackEvent('coin_collected', {
            current_score: this.score,
            coins_collected: this.score / 10 // –ö–∞–∂–¥–∞—è –º–æ–Ω–µ—Ç–∞ –¥–∞–µ—Ç 10 –æ—á–∫–æ–≤
        });
        
        // –£–¥–∞–ª—è–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ –º–æ–Ω–µ—Ç—ã
        
        coin.element.remove();
        this.coins.splice(index, 1);
    }

    updateTimer() {
        this.timeLeft--;
        if (this.timerElement) {
            this.timerElement.textContent = this.timeLeft;
        }
        
        if (this.timeLeft <= 0) {
            this.endGame();
        }
    }

    endGame() {
        console.log('endGame called. Current gameLoopId:', this.gameLoopId, 'isGameOver:', this.isGameOver);
        if(this.isGameOver) {
            console.log('endGame: Game is already over, exiting to prevent multiple calls.');
            // return; // –ù–µ –≤—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤, –Ω–æ ÏÉÅÌÉúÎäî Ïù¥ÎØ∏ true
        }
        this.isGameOver = true;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã –≤ –º–µ—Ç—Ä–∏–∫—É
        this.trackEvent('game_end', {
            score: this.score,
            time_played: 60 - this.timeLeft,
            device_type: this.isMobile ? 'mobile' : 'desktop',
            is_authorized: !!this.playerPhone
        });

        if (this.gameLoopId) {
            cancelAnimationFrame(this.gameLoopId);
            this.gameLoopId = null;
            console.log('endGame: gameLoopId cancelled and set to null.');
        } else {
            console.log('endGame: gameLoopId was already null or not active.');
        }
        if (this.timerInterval) { // –¢–∞–∫–∂–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∑–¥–µ—Å—å
            clearInterval(this.timerInterval);
            this.timerInterval = null;
            console.log('endGame: timerInterval cleared.');
        }
        this.stopSound();

        if (this.finalScoreElement) this.finalScoreElement.textContent = this.score;

        let authToSaveButton = document.getElementById('auth-to-save');
        const gameOverContent = document.querySelector('.game-over-content');

        if (!this.playerPhone || this.playerPhone.length < 10) { // –ò–≥—Ä–æ–∫ –ù–ï –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
            this.pendingScore = this.score; 

            // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤" –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const leaderboardBtn = document.getElementById('show-leaderboard-from-gameover');
            if (leaderboardBtn) {
                leaderboardBtn.style.display = 'none';
            }

            if (!authToSaveButton && gameOverContent) {
                authToSaveButton = document.createElement('button');
                authToSaveButton.id = 'auth-to-save';
                authToSaveButton.className = 'game-btn';
                const showLeaderboardBtn = document.getElementById('show-leaderboard-from-gameover');
                if (showLeaderboardBtn && showLeaderboardBtn.parentNode === gameOverContent) {
                    showLeaderboardBtn.insertAdjacentElement('afterend', authToSaveButton);
                } else {
                    gameOverContent.appendChild(authToSaveButton); 
                }
            }

            if (authToSaveButton) {
                authToSaveButton.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç';
                authToSaveButton.style.display = 'block'; 

                const newButton = authToSaveButton.cloneNode(true);
                authToSaveButton.parentNode.replaceChild(newButton, authToSaveButton);
                authToSaveButton = newButton;

                authToSaveButton.addEventListener('click', () => {
                    if(this.gameOverScreen) this.gameOverScreen.classList.add('hidden');
                    if(this.authScreen) this.authScreen.classList.remove('hidden');
                    
                    const phoneInput = document.getElementById('player-phone');
                    if (phoneInput) {
                        phoneInput.required = true;
                        phoneInput.hidden = false;
                        phoneInput.disabled = false;
                        const formGroup = phoneInput.closest('.form-group');
                        if (formGroup) formGroup.classList.remove('form-group-hidden');
                    }
                    
                    const startGameBtnOnAuth = document.getElementById('start-game-btn');
                    if (startGameBtnOnAuth) startGameBtnOnAuth.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å';
                    
                    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç—å—é –±–ª–æ–∫–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    const gameRulesBlock = document.querySelector('.auth-content .game-rules');
                    const pendingScoreAuthMsg = document.getElementById('pending-score-auth-message');

                    if (gameRulesBlock) gameRulesBlock.classList.add('hidden'); // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞
                    if (pendingScoreAuthMsg) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—á–∫–∞—Ö
                        pendingScoreAuthMsg.classList.remove('hidden');
                        pendingScoreAuthMsg.innerHTML = `<strong>–í—ã –Ω–∞–±—Ä–∞–ª–∏: ${this.pendingScore} –æ—á–∫–æ–≤!</strong><br>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.`;
                    }
                });
            }

            if (this.resultMessageElement) this.resultMessageElement.textContent = "–ß—Ç–æ–±—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ø–∞–ª –≤ —Ç–∞–±–ª–∏—Ü—É, —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ.";
            if (this.bestScoreElement) this.bestScoreElement.textContent = "-";

        } else { // –ò–≥—Ä–æ–∫ –ê–í–¢–û–†–ò–ó–û–í–ê–ù
            if (authToSaveButton) {
                authToSaveButton.style.display = 'none'; 
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤" –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const leaderboardBtn = document.getElementById('show-leaderboard-from-gameover');
            if (leaderboardBtn) {
                leaderboardBtn.style.display = 'block';
            }
            
            this.saveResult(); 
            if (this.bestScoreElement) this.bestScoreElement.textContent = this.bestScore;
            // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (this.resultMessageElement) this.resultMessageElement.textContent = "";
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã
        const gameOverPromoValue = document.getElementById('game-over-promo-value');
        const gameOverPromoCopied = document.getElementById('game-over-promo-copied');
        if (gameOverPromoValue && gameOverPromoCopied) {
            gameOverPromoValue.onclick = () => {
                navigator.clipboard.writeText(gameOverPromoValue.textContent || "GAME2").then(() => {
                    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
                    this.trackEvent('promo_code_copied', {
                        promo_code: gameOverPromoValue.textContent || "GAME2",
                        score: this.score,
                        device_type: this.isMobile ? 'mobile' : 'desktop',
                        is_authorized: !!this.playerPhone
                    });
                    
                    gameOverPromoCopied.classList.remove('hidden');
                    setTimeout(() => {
                        gameOverPromoCopied.classList.add('hidden');
                    }, 2000);
                }).catch(err => {
                    console.error('Failed to copy promo code: ', err);
                    
                    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—à–∏–±–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
                    this.trackEvent('promo_code_copy_error', {
                        device_type: this.isMobile ? 'mobile' : 'desktop',
                        error: err.message
                    });
                    
                    gameOverPromoCopied.textContent = '–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è';
                    gameOverPromoCopied.style.color = 'red';
                    gameOverPromoCopied.classList.remove('hidden');
                    setTimeout(() => {
                        gameOverPromoCopied.classList.add('hidden');
                        gameOverPromoCopied.textContent = '–ü—Ä–æ–º–æ–∫–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!'; // Reset message
                        gameOverPromoCopied.style.color = '#4dff4d'; // Reset color
                    }, 2000);
                });
            };
        }

        if (this.gameOverScreen) this.gameOverScreen.classList.remove('hidden');
    }

    startGame() {
        console.log('startGame called. Initial state: isGameOver:', this.isGameOver, 'gameLoopId:', this.gameLoopId);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –≤ –º–µ—Ç—Ä–∏–∫—É
        this.trackEvent('game_start', {
            device_type: this.isMobile ? 'mobile' : 'desktop',
            is_authorized: !!this.playerPhone
        });
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞
        if (this.gameLoopId) {
            console.log('startGame: –æ—Ç–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é, gameLoopId:', this.gameLoopId);
            cancelAnimationFrame(this.gameLoopId);
            this.gameLoopId = null;
        }
        
        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –º—ã –≤—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.clearGame(); 
        this.isGameOver = false;
        this.score = 0;
        this.timeLeft = 60;
        this.lives = 3; 
        this.obstacles = [];
        this.coins = [];
        this.currentLane = 1; // –°–±—Ä–æ—Å –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –ø–æ–ª–æ—Å—É

        if (this.scoreElement) this.scoreElement.textContent = this.score;
        if (this.timerElement) this.timerElement.textContent = this.timeLeft;
        this.updateLivesDisplay();
        this.updatePlayerPosition(); // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        console.log('startGame: State reset. isGameOver:', this.isGameOver);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
        console.log('startGame: Requesting animation frame.');
        this.gameLoopId = requestAnimationFrame(this.gameLoop.bind(this));

        this.timerInterval = setInterval(() => {
            this.updateTimer();
        }, 1000);
    }

    restartGame() {
        try {
            console.log('Restarting game...');
            
            // Clear intervals
            if (this.gameLoopId) {
                cancelAnimationFrame(this.gameLoopId);
                this.gameLoopId = null;
            }
            if (this.timerInterval) {
                clearInterval(this.timerInterval);
                this.timerInterval = null;
            }

            // Clear game field
            this.clearGame();

            // Hide Game Over screen
            if (this.gameOverScreen) {
                this.gameOverScreen.classList.add('hidden');
            }

            // Update player position
            this.updatePlayerPosition();

            // Reset audio
            this.stopSound();
            if (this.audio.background) {
                this.audio.background.currentTime = 0;
            }

            // Start the game again
            this.startGame();
        } catch (error) {
            console.error('Error in restartGame:', error);
        }
    }

    toggleSound() {
        try {
            this.isMuted = !this.isMuted;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞
            this.trackEvent('sound_toggle', {
                sound_state: this.isMuted ? 'off' : 'on',
                device_type: this.isMobile ? 'mobile' : 'desktop'
            });
            
            if (this.isMuted) {
                // Mute background music
                if (this.audio.background) {
                    this.audio.background.volume = 0;
                    this.audio.background.pause();
                }
            } else {
                // Unmute background music
                if (this.audio.background) {
                    this.audio.background.volume = 0.3;
                    this.audio.background.play().catch(e => console.warn('Error playing background sound:', e));
                }
            }
        } catch (error) {
            console.error('Error toggling sound:', error);
        }
    }

    // Play background music only
    playSound() {
        if (!this.isMuted && this.audio.background && this.audio.background.paused) {
            this.audio.background.play().catch(e => console.warn(`Error playing background sound:`, e));
        }
    }

    // Stop background music only
    stopSound() {
         if (this.audio.background) {
            this.audio.background.pause();
         }
    }

    createLivesDisplay() {
        if (!this.livesElement) {
            // Create lives display container if it doesn't exist
            this.livesElement = document.createElement('div');
            this.livesElement.id = 'lives';
            this.livesElement.className = 'lives-display';
            
            const livesLabel = document.createElement('span');
            livesLabel.textContent = '–ñ–∏–∑–Ω–∏: ';
            this.livesElement.appendChild(livesLabel);
            
            this.livesCountElement = document.createElement('span');
            this.livesCountElement.className = 'lives-count';
            this.livesElement.appendChild(this.livesCountElement);
            
            // Add it near the score/timer
            const gameInfo = document.querySelector('.game-info');
            if (gameInfo) {
                gameInfo.appendChild(this.livesElement);
            } else if (this.gameArea) {
                this.gameArea.parentNode.insertBefore(this.livesElement, this.gameArea);
            }
        } else {
            // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∞–π–¥–µ–º –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ —Å—á–µ—Ç—á–∏–∫
            this.livesCountElement = this.livesElement.querySelector('.lives-count');
            if (!this.livesCountElement) {
                // –ï—Å–ª–∏ –ø–æ—á–µ–º—É-—Ç–æ —Å—á–µ—Ç—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–¥–∏–º –µ–≥–æ
                this.livesCountElement = document.createElement('span');
                this.livesCountElement.className = 'lives-count';
                this.livesElement.appendChild(this.livesCountElement);
            }
        }
        
        this.updateLivesDisplay();
    }
    
    updateLivesDisplay() {
        // –ò—â–µ–º —Å—á–µ—Ç—á–∏–∫ –∂–∏–∑–Ω–µ–π, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if (!this.livesCountElement) {
            this.livesCountElement = document.querySelector('.lives-count');
        }
        
        if (this.livesCountElement) {
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∂–∏–∑–Ω–∏ –≤ –≤–∏–¥–µ —Å–µ—Ä–¥–µ—á–µ–∫
            let heartsHTML = '';
            for (let i = 0; i < this.lives; i++) {
                heartsHTML += '‚ù§Ô∏è';
            }
            for (let i = this.lives; i < 3; i++) {
                heartsHTML += 'üñ§';
            }
            this.livesCountElement.innerHTML = heartsHTML;
        } else {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∂–∏–∑–Ω–µ–π');
        }
    }
    
    createLeaderboardButton() {
        // Check if the trophy button already exists
        let leaderboardBtn = document.getElementById('leaderboard-btn');
        
        // If it doesn't exist, create it
        if (!leaderboardBtn) {
            leaderboardBtn = document.createElement('button');
            leaderboardBtn.id = 'leaderboard-btn';
            leaderboardBtn.className = 'trophy-button';
            leaderboardBtn.innerHTML = 'üèÜ';
            leaderboardBtn.title = '–¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤';
            
            // Add the button to the controls-right container
            const controlsRight = document.querySelector('.controls-right');
            if (controlsRight) {
                controlsRight.appendChild(leaderboardBtn);
            }
        }
        
        // Add event listener (reattach it in case it was lost)
        leaderboardBtn.addEventListener('click', () => {
            this.updateLeaderboard();
            const leaderboard = document.getElementById('leaderboard');
            if (leaderboard) {
                leaderboard.classList.remove('hidden');
            }
        });
    }

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
    gameLoop() {
        // console.log('gameLoop running. isGameOver:', this.isGameOver); // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏ —Ü–∏–∫–ª–∞
        if (this.isGameOver) return;

        // –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ setInterval)
        if (Math.random() < this.obstacleProbability) {
            this.createObstacle();
        }
        if (Math.random() < this.coinProbability) {
            this.createCoin();
        }

        this.moveObstacles();
        this.moveCoins();

        this.gameLoopId = requestAnimationFrame(this.gameLoop.bind(this));
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    checkIsMobile() {
        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π –≤ –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫—É
    trackEvent(eventName, params = {}) {
        try {
            if (typeof ym !== 'undefined') {
                console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è: ${eventName}`, params);
                ym(101785403, 'reachGoal', eventName, params);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è –≤ –º–µ—Ç—Ä–∏–∫—É:', error);
        }
    }
}

// Start game when page loads
window.addEventListener('load', () => {
    const game = new Game();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (game.authScreen) game.authScreen.classList.remove('hidden');
    if (game.gameContainer) game.gameContainer.classList.add('hidden');
    
    // –ù–∞ –Ω–∞—á–∞–ª—å–Ω–æ–º —ç–∫—Ä–∞–Ω–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∏–¥–Ω—ã, –∞ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—á–∫–∞—Ö - —Å–∫—Ä—ã—Ç—ã
    const gameRulesBlock = document.querySelector('#auth-screen .game-rules');
    const pendingScoreAuthMsg = document.getElementById('pending-score-auth-message');

    if (gameRulesBlock) gameRulesBlock.classList.remove('hidden');
    if (pendingScoreAuthMsg) pendingScoreAuthMsg.classList.add('hidden');

    const authForm = document.getElementById('auth-form');
    if (authForm) {
        const phoneInput = document.getElementById('player-phone');
        if (phoneInput) {
            phoneInput.required = false;
            phoneInput.hidden = true;     // –°–∫—Ä—ã–≤–∞–µ–º —Å–∞–º–æ –ø–æ–ª–µ
            phoneInput.disabled = true;   // –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–ª–µ, —á—Ç–æ–±—ã –æ–Ω–æ –Ω–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–ª–æ—Å—å
            const formGroup = phoneInput.closest('.form-group');
            if (formGroup) {
                formGroup.classList.add('form-group-hidden'); // –°–∫—Ä—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –±–ª–æ–∫
            }
        }
        
        const startButton = document.getElementById('start-game-btn');
        if (startButton) {
            startButton.textContent = '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É';
        }
    }
});
